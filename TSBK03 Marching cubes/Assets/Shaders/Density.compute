// Each #kernel tells which function to compile; you can have many kernels
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Density

#include "Noise.compute"

// Buffer to write to
RWStructuredBuffer<float> densityData;

// Variables set in C# script

// voxel data
int chunkSize;
int chunkPosX;
int chunkPosY;
int chunkPosZ;
int numPointsPerAxis;


// noise params
int Octaves;
float Amplitude;
float Frequency;

// problem: indexing only goes between 0 and 32
// causes sides of chunk to be 0, creating walls
int indexFromCoord(int x, int y, int z, int w) {
	return x + w * (y + w * z);
	//return z * w * w + y * w + x;
}

// 8*8*8 since 3D texture
[numthreads(8, 8, 8)]
void Density(uint3 id : SV_DispatchThreadID)
{
	if (id.x > numPointsPerAxis || id.y > numPointsPerAxis || id.z > numPointsPerAxis) {
		//densityData[index] = 0;
		return;
	}

	int index = indexFromCoord(id.x, id.y, id.z, numPointsPerAxis);

	float3 coord = id.xyz;
	coord.x = (id.x + chunkPosX);
	coord.y = (id.y + chunkPosY);
	coord.z = (id.z + chunkPosZ);
	float density;
	float amp = Amplitude;
	float freq = Frequency;
	float maxVal;

	//  Sphere code
	/*float rad = 30;
	float center = numPointsPerAxis * (chunkSize / 2);
	float len = length(coord - (float3(0, -rad, 0) + float3(center,center,center)));
	density = rad - len;*/
	//density = rad - length(coord – float3(0, -rad, 0));

	// Flat world code
	density = id.y + chunkPosY;
	density = -density;
	density += (1.0 - snoise(coord / numPointsPerAxis * freq)) * amp;
	

	// Octaves

	//test
	
	density += (1.0 - snoise(coord / numPointsPerAxis * 4.03 * freq)) * amp * 0.25;
	density += (1.0 - snoise(coord / numPointsPerAxis * 1.96 * freq)) * amp * 0.50;
	density += (1.0 - snoise(coord / numPointsPerAxis * 1.01 * freq)) * amp;

	density += (1.0 - snoise(coord / numPointsPerAxis * 0.5 * freq)) * amp * 2.0;
	density += (1.0 - snoise(coord / numPointsPerAxis * 0.25 * freq)) * amp * 4.0;
	//density += (1.0 - snoise(coord / numPointsPerAxis * 0.125 * freq)) * amp*8;
	float3 warp = (1.0 - snoise(coord / numPointsPerAxis * 0.004));
	coord += warp * 8;
	density += (1.0 - snoise(coord / numPointsPerAxis * 0.125 * freq)) * amp * 4.0;

	

	densityData[index] = density;

}
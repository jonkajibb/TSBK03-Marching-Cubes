// Includes
#include "LookUpTables.compute"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel MarchingCubes

struct Triangle {
	float3 vertex0;
	float3 vertex1;
	float3 vertex2;
};

RWStructuredBuffer<float> densityData;
AppendStructuredBuffer<Triangle> triangleBuffer;

// voxel data
int chunkSize;
int numPointsPerAxis;

int indexFromCoord(int x, int y, int z, int w) {
	return x + w * (y + w * z);
	//return z * w * w + y * w + x;
}

void FillCube(float x, float y, float z, out float cube[8]) {
	float3 pos = float3(x, y, z);
	float3 corner;

	for (int i = 0; i < 8; i++) {
		corner = pos + cornerTable[i];
		cube[i] = densityData[corner.z * numPointsPerAxis * numPointsPerAxis + corner.y * numPointsPerAxis + corner.x];
	}
}

float3 linearInterpolation(float3 v1, float3 v2, float val1, float val2) {

	float isoValue = 0;
	float3 outVertex;

	outVertex = v1 + ((isoValue - val1) * ((v2 - v1) / (val2 - val1)));
	
	return outVertex;
}

[numthreads(8,8,8)]
void MarchingCubes (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numPointsPerAxis - 1 || id.y >= numPointsPerAxis - 1 || id.z >= numPointsPerAxis - 1) {
		return;
	}

	float3 pos = id.xyz;
	// Cube, 8 corners
	float cube[8];

	int cubeIndex = 0;

	//Find which corners / vertices are inside or outside the surface
	FillCube(pos.x, pos.y, pos.z, cube);

	for (int v = 0; v < 8; v++)
	{
		if (cube[v] < 0) // Shifts 1 to left by 'v' bits. v=3 -> 0000 1000 = 8
			cubeIndex |= 1 << v;
	}

	// If the configuration of this cube is 0 or 255 (completely inside the terrain or completely outside of it) we don't need to do anything.
	if (cubeIndex == 0 || cubeIndex == 255)
		return;

	// Find right set of triangles. Super advanced loop
	for (int i = 0; triangleTable[cubeIndex][i] != -1; i += 3)
	{	
		int edge0a = edgeConnection[triangleTable[cubeIndex][i]].x;
		int edge0b = edgeConnection[triangleTable[cubeIndex][i]].y;
		int edge1a = edgeConnection[triangleTable[cubeIndex][i + 1]].x;
		int edge1b = edgeConnection[triangleTable[cubeIndex][i + 1]].y;
		int edge2a = edgeConnection[triangleTable[cubeIndex][i + 2]].x;
		int edge2b = edgeConnection[triangleTable[cubeIndex][i + 2]].y;

		float3 vert0a = pos + cornerTable[edge0a];
		float3 vert0b = pos + cornerTable[edge0b];

		float3 vert1a = pos + cornerTable[edge1a];
		float3 vert1b = pos + cornerTable[edge1b];

		float3 vert2a = pos + cornerTable[edge2a];
		float3 vert2b = pos + cornerTable[edge2b];

		// Create vertex in middle of each edge
		/*float3 vert0 = (vert0a + vert0b) * 0.5f;
		float3 vert1 = (vert1a + vert1b) * 0.5f;
		float3 vert2 = (vert2a + vert2b) * 0.5f;*/

		// Vertices with linear interpolation
		float3 vert0 = linearInterpolation(vert0a, vert0b, cube[edge0a], cube[edge0b]);
		float3 vert1 = linearInterpolation(vert1a, vert1b, cube[edge1a], cube[edge1b]);
		float3 vert2 = linearInterpolation(vert2a, vert2b, cube[edge2a], cube[edge2b]);

		// Append one struct containing the new vertices
		// Several appends in one thread run causes problems
		Triangle tri;
		tri.vertex0 = vert0;
		tri.vertex1 = vert1;
		tri.vertex2 = vert2;

		triangleBuffer.Append(tri);
	}
}
